'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zinterstore = zinterstore;

var _es6Map = require('es6-map');

var _es6Map2 = _interopRequireDefault(_es6Map);

var _arrayFrom = require('array-from');

var _arrayFrom2 = _interopRequireDefault(_arrayFrom);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function zinterstore(destKey, numKeys) {
  var srcMaps = [];

  if (parseInt(numKeys, 10) !== (arguments.length <= 2 ? 0 : arguments.length - 2)) {
    throw new Error('ERR syntax error');
  }

  for (var i = 0; i < (arguments.length <= 2 ? 0 : arguments.length - 2); i += 1) {
    // @TODO investigate a more stable way to detect sorted lists
    if (!this.data.has(arguments.length <= i + 2 ? undefined : arguments[i + 2]) || this.data.get(arguments.length <= i + 2 ? undefined : arguments[i + 2]) instanceof _es6Map2.default) {
      srcMaps.push(this.data.get(arguments.length <= i + 2 ? undefined : arguments[i + 2]));
    }
  }

  // deep copy inputs
  var inputs = srcMaps.map(function (x) {
    return JSON.parse(JSON.stringify((0, _arrayFrom2.default)(x.values())));
  });

  var intersected = _lodash.intersectionBy.apply(undefined, _toConsumableArray(inputs).concat(['value']));

  if (intersected.length === 0) {
    // make sure we don't have destKey set anymore
    this.data.delete(destKey);

    return 0;
  }

  // @TODO: support AGGREGATE option
  // @TODO: support WEIGHTS option
  // aggregate weights
  for (var _i = 0; _i < intersected.length; _i += 1) {
    var weightSum = 0;

    for (var j = 0; j < srcMaps.length; j += 1) {
      if (srcMaps[j].get(intersected[_i].value)) {
        weightSum += srcMaps[j].get(intersected[_i].value).score;
      }
    }

    intersected[_i].score = weightSum;
    intersected[_i] = [intersected[_i].value, intersected[_i]];
  }

  var intersectedMap = new _es6Map2.default(intersected);

  // store new sorted set
  this.data.set(destKey, intersectedMap);

  return intersected.length;
}